exclude = ['manage.py', '.venv', 'venv', 'env', '.env', 'migrations']
#extend = './pyproject.toml'
indent-width = 4
line-length = 80
output-format = 'full'  # "full" | "concise" | "grouped" | "json" | "junit" | "github" | "gitlab" | "pylint" | "azure"
preview = true  # unstable
respect-gitignore = false
show-fixes = true
target-version = 'py311'


[format]
docstring-code-format = true
docstring-code-line-length = 60
indent-style = 'space'
line-ending = 'auto'
preview = true  # unstable
quote-style = 'single'
skip-magic-trailing-comma = true


[lint]
fixable = ['ALL']
ignore = [
    'E501',
    'RUF001',
    'RUF003',
    'D',
    'COM812',
    'ISC001',
    'ANN',
    'ARG001',
    'TID252',
#    'Q000',
    'ERA001',
    'F401',
    'RUF012'
]
logger-objects = ['mylogger.logger', 'assp_logger.logger']
preview = true
select = [
    'F',      # pyflakes
    'E',      # pycodestyle error
    'W',      # pycodestyle warning
    'C90',    # mccabe  # complexity
    'I',      # isort
    'N',      # pep8-naming
    'D',      # pydocstyle
    'UP',     # pyupgrade
    'YTT',    # flake8-2020  # sys version info
    'ANN',    # flake8-annotations
    'ASYNC',  # flake8-async
    'S',      # flake8-bandit
    'BLE',    # flake8-blind-except
    'FBT',    # flake8-boolean-trap
    'B',      # flake8-bugbear
    'A',      # flake8-builtins
    'COM',    # flake8-commas
    'C4',     # flake8-comprehensions
    'DTZ',    # flake8-datetimez
    'T10',    # flake8-debugger
    'DJ',     # flake8-django
    'EM',     # flake8-errmsg
    'EXE',    # flake8-executable
    'ISC',    # flake8-implicit-str-concat
    'ICN',    # flake8-import-conventions
    'LOG',    # flake8-logging
    'G',      # flake8-logging-format
    'INP',    # flake8-no-pep420
    'PIE',    # flake8-pie
    'T20',    # flake8-print
    'PYI',    # flake8-pyi
    'PT',     # flake8-pytest-style
    'Q',      # flake8-quotes
    'RSE',    # flake8-raise
    'RET',    # flake8-return
    'SLF',    # flake8-self
    'SLOT',   # flake8-slots
    'SIM',    # flake8-simplify
    'TID',    # flake8-tidy-imports
    'TCH',    # flake8-type-checking
    'INT',    # flake8-gettext
    'ARG',    # flake8-unused-arguments
    'PTH',    # flake8-use-pathlib
    'TD',     # flake8-todos
    'FIX',    # flake8-fixme_
    'ERA',    # eradicate
    'PD',     # pandas-vet
    'PGH',    # pygrep-hooks
    'PLC',    # Pylint Convention
    'PLE',    # Pylint Error
    'PLR',    # Pylint Refactor
    'PLW',    # Pylint Warning
    'TRY',    # tryceratops
    'FLY',    # flynt
    'NPY',    # NumPy-specific rules
    'FAST',   # FastAPI
    'AIR',    # Airflow
    'PERF',   # Perflint
    'FURB',   # refurb
    'DOC',    # pydoclint
    'RUF',    # Ruff-specific rules
]
task-tags = ['HACK', 'TODO', 'FIXME', 'XXX']


[lint.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false
mypy-init-return = false
suppress-dummy-args = false
suppress-none-returning = false


[lint.flake8-bandit]
check-typed-exception = false
hardcoded-tmp-directory = []


[lint.flake8-boolean-trap]
extend-allowed-calls = []


[lint.flake8-bugbear]
extend-immutable-calls = []


[lint.flake8-builtins]
builtins-allowed-modules = ['id']
builtins-ignorelist = ['id']


[lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true


[lint.flake8-errmsg]
max-string-length = 20


[lint.flake8-implicit-str-concat]
allow-multiline = true


[lint.flake8-import-conventions]
banned-from = ['sqlalchemy', 'datetime']
[lint.flake8-import-conventions.aliases]
sqlalchemy = 'sa'
[lint.flake8-import-conventions.banned-aliases]
'tensorflow.keras.backend' = ['K']
[lint.flake8-import-conventions.extend-aliases]
'dask.dataframe' = 'dd'


[lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true
parametrize-names-type = 'tuple'
parametrize-values-row-type = 'tuple'
parametrize-values-type = 'tuple'
raises-extend-require-match-for = ['requests.RequestException']
raises-require-match-for = ['requests.RequestException']


[lint.flake8-quotes]
avoid-escape = true
docstring-quotes = 'double'
inline-quotes = 'single'
multiline-quotes = 'double'


[lint.flake8-self]
extend-ignore-names = ['Base']
ignore-names = ['_new']


[lint.flake8-tidy-imports]
ban-relative-imports = 'all'
banned-module-level-imports = ['torch', 'tensorflow']


#[lint.flake8-type-checking]
#exempt-modules = ['typing', 'typing_extensions']
#quote-annotations = true
#runtime-evaluated-base-classes = ['pydantic.BaseModel', 'sqlalchemy.orm.DeclarativeBase']
#runtime-evaluated-decorators = ['pydantic.validate_call', 'attrs.define']
#strict = true


[lint.flake8-unused-arguments]
ignore-variadic-names = false


[lint.isort]
case-sensitive = false
classes = []
combine-as-imports = false
constants = []
detect-same-package = true
force-single-line = true
force-sort-within-sections = false
force-wrap-aliases = false
forced-separate = ['testing']
from-first = false
lines-between-types = 1
no-lines-before = ['future']
order-by-type = true
relative-imports-order = 'closest-to-furthest'
required-imports = []
section-order = ['future', 'standard-library', 'third-party', 'first-party', 'local-folder', 'testing']
split-on-trailing-comma = false
[lint.isort.sections]
'testing' = ['pytest', 'hypothesis']
'typing' = ['typing', 'typing_extensions', 'types', 'collections.abc']


[lint.mccabe]
max-complexity = 8


[lint.pep8-naming]
#classmethod-decorators = [
#    'pydantic.validator',
#]
#staticmethod-decorators = [
#    'pydantic.field_serializer',
#]


[lint.pycodestyle]
ignore-overlong-task-comments = false
max-line-length = 80
max-doc-length = 100


[lint.pydocstyle]
convention = 'google'


[lint.pyflakes]
extend-generics = []


[lint.pylint]
allow-dunder-method-names = ['__tablename__']
allow-magic-value-types = []
max-args = 5
max-bool-expr = 5
max-branches = 10
max-locals = 10
max-nested-blocks = 5
max-positional-args = 5
max-public-methods = 20
max-returns = 5
max-statements = 50


[lint.ruff]
parenthesize-tuple-in-subscript = true